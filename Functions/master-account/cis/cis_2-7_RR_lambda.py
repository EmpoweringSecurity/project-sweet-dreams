 # Copyright 2020 Stefan Prioriello
 # SPDX-License-Identifier: MIT
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy of this 
 # software and associated documentation files (the "Software"), to deal in the Software 
 # without restriction, including without limitation the rights to use, copy, modify, 
 # merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
 # permit persons to whom the Software is furnished to do so, subject to the following 
 # conditions:
 #
 # The above copyright notice and this permission notice shall be included in all 
 # copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 # INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 # PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 # OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 # SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import boto3
import json
import time
import os
import argparse
import logging

from common import account_session
from common import sns_notification

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    #VARIABLES
    #Lambda Environment Variables
    TargetAccountSecurityRoleName=os.environ['TargetAccountSecurityRoleName'] 
   
    #Common Variables
    targetAccount=event["detail"]["findings"][0]["AwsAccountId"]
    productArn=event["detail"]["findings"][0]["ProductArn"]  

    findingId = str(event['detail']['findings'][0]['Id'])

    # import lambda function name from runtime env
    lambdaFunctionName = os.environ['AWS_LAMBDA_FUNCTION_NAME']

    #Assume role in target account for response 
    session=account_session.get_session(targetAccount, os.environ['TargetAccountSecurityRoleName']) 

    # parse non-compliant trail from Security Hub finding
    noncompliantTrailFull = str(event['detail']['findings'][0]['Resources'][0]['Id'])
    #Parse to '<TrailName>' because the AliasName for a KMS CMK key has the pattern 'alias/^[a-zA-Z0-9/_-]+$'
    noncompliantTrail = noncompliantTrailFull.split('/')[-1]

    # parse account ID from Security Hub finding, will be needed for Key Policy
    accountID = str(event['detail']['findings'][0]['AwsAccountId'])
    
    # import boto3 clients for KMS and CloudTrail
    kms = session.client('kms')
    cloudtrail = session.client('cloudtrail')
    securityhub = boto3.client('securityhub')

    # create a new KMS CMK to encrypt the non-compliant trail
    try:
        createKey = kms.create_key(
            Description='Generated by Security Hub to remediate CIS 2.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs',
            KeyUsage='ENCRYPT_DECRYPT',
            Origin='AWS_KMS'
        )
        # save key id as a variable
        cloudtrailKey = str(createKey['KeyMetadata']['KeyId'])
        logger.info("Created Key" + " " + cloudtrailKey)
    except Exception as e:
        print(e)
        logger.info("KMS CMK creation failed")
        raise
        
    # wait 2 seconds for key creation to propogate
    time.sleep(2)

    # attach an alias for easy identification to the key - must always begin with "alias/"
    try:
        createAlias = kms.create_alias(
            AliasName='alias/trail/' + noncompliantTrail + '-CMK',
            TargetKeyId=cloudtrailKey
        )
        logger.info(createAlias)
    except Exception as e:
        print(e)
        logger.info("Failed to create KMS Alias")
        raise
    
    # wait 1 second
    time.sleep(1)

    # policy name for PutKeyPolicy is always "default"
    policyName = 'default'
    # set Key Policy as JSON object
    keyPolicy={
        "Version": "2012-10-17",
        "Id": "Key policy created by CloudTrail",
        "Statement": [
            {
                "Sid": "Enable IAM User Permissions",
                "Effect": "Allow",
                "Principal": {
                    "AWS": [ "arn:aws:iam::" + accountID + ":root" ]
                },
                "Action": "kms:*",
                "Resource": "*"
            },
            {
                "Sid": "Allow CloudTrail to encrypt logs",
                "Effect": "Allow",
                "Principal": {
                    "Service": "cloudtrail.amazonaws.com"
                },
                "Action": "kms:GenerateDataKey*",
                "Resource": "*",
                "Condition": {
                    "StringLike": {
                        "kms:EncryptionContext:aws:cloudtrail:arn": "arn:aws:cloudtrail:*:" + accountID + ":trail/" + noncompliantTrail
                    }
                }
            },
            {
                "Sid": "Allow CloudTrail to describe key",
                "Effect": "Allow",
                "Principal": {
                    "Service": "cloudtrail.amazonaws.com"
                },
                "Action": "kms:DescribeKey",
                "Resource": "*"
            },
            {
                "Sid": "Allow principals in the account to decrypt log files",
                "Effect": "Allow",
                "Principal": {
                    "AWS": "*"
                },
                "Action": [
                    "kms:Decrypt",
                    "kms:ReEncryptFrom"
                ],
                "Resource": "*",
                "Condition": {
                    "StringEquals": {
                        "kms:CallerAccount": accountID
                    },
                    "StringLike": {
                        "kms:EncryptionContext:aws:cloudtrail:arn": "arn:aws:cloudtrail:*:" + accountID + ":trail/" + noncompliantTrail
                    }
                }
            },
            {
                "Sid": "Allow alias creation during setup",
                "Effect": "Allow",
                "Principal": {
                    "AWS": "*"
                },
                "Action": "kms:CreateAlias",
                "Resource": "*",
                "Condition": {
                    "StringEquals": {
                        "kms:CallerAccount": accountID
                    }
                }
            }
        ]
    }
    # attaches above key policy to key
    try:
        attachKeyPolicy = kms.put_key_policy(
            KeyId=cloudtrailKey,
            Policy=json.dumps(keyPolicy),
            PolicyName=policyName
        )
        logger.info(attachKeyPolicy)
    except Exception as e:
        print(e)
        logger.info("Failed to attach key policy to Key:" + " " + cloudtrailKey)

    # update CloudTrail with the new CMK
    try:
        encryptTrail = cloudtrail.update_trail(
            Name=noncompliantTrail,
            KmsKeyId=cloudtrailKey
        )
        logger.info(encryptTrail)
        logger.info("CloudTrail trail" + " " + noncompliantTrail + " " + "has been successfully encrypted!")

        #Updated Security Hub Finding
        try:
            response = securityhub.batch_update_findings(
                FindingIdentifiers=[
                    {
                        'Id': findingId,
                        'ProductArn': productArn
                    },
                ],
                Note={
                    'Text': "CloudTrail trail" + " " + noncompliantTrail + " " + "has been successfully encrypted! Full arn: " + noncompliantTrailFull ,
                    'UpdatedBy': lambdaFunctionName
                },
                Workflow={
                    'Status': 'RESOLVED'
                },
            )
            logger.info(response)

            #Send Notification
            findingTitle=event["detail"]["findings"][0]["Title"]
            message = f"Security Hub Finding: {findingTitle} has been successfully responded to and resolved. Finding Id: {findingId}"
            sns_notification.sendSNSNotification(os.environ['AlertSnsArn'], message)
        except Exception as e:
            print(e)
            raise

    except Exception as e:
        print(e)
        logger.info("Failed to attach KMS CMK to CloudTrail")